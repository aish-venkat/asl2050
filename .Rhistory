world<-getMap(); sa<-subset(world, continent=="South America")
occ_poly<-crop(occ_poly, sa)
covs<-stack()
for(j in 1:5){
covs<-addLayer(covs, raster("covariate_brick.tif", band=j))
}
names(covs)<-c("EVI", "LST", "Aridity", "Rural-Urban", "Population")
par(oma=c(0,0,0,0), mar=c(0,0,0,0))
plot(covs);
plot(covs[[1]], legend=F, axes=FALSE, box=FALSE);
plot(occ_poly, add=T, lwd=2, col=rgb(0,0,1,alpha=0.3));
plot(occ_pt, add=T, pch=18, cex=0.75, col="red");
ras_dat<-data.frame(raster::extract(covs, occ_pt))
summary(ras_dat)
pairs(ras_dat, fig=TRUE)
M <- cor(ras_dat)
corrplot(M, method="circle")
mins<-apply(ras_dat,2,min); maxs<-apply(ras_dat,2,max);
# Create copy of covariates
cov_c<-covs
for(j in 1:5){
cov_c[[j]][(cov_c[[j]]<mins[j] | cov_c[[j]]>maxs[j])] <- 0
}
# Reclassify values to 0,1
m <- matrix(c(0.000000000000001, max(cellStats(cov_c, "max")), 1), ncol=1,
byrow=T)
covs_rc<-raster::reclassify(cov_c[[c(1,2,3,5)]], m)
covs_rc<-addLayer(covs_rc, covs[[4]])
## Extract layers that meet all criteria
suit<-sum(covs_rc)
rpal <- brewer.pal(n = 5, name = "Reds")
plot(suit, col = rpal)
maxsuit<-suit; maxsuit[maxsuit<5]<-0;
plot(maxsuit, col = c("grey", "red"), legend=FALSE, axes=FALSE, box=FALSE)
## Zoom into location with known cases
plot(maxsuit, col = c("grey", "red"), legend=FALSE, axes=FALSE, box=FALSE,
ext=raster::union(extent(occ_pt), extent(occ_poly)))
plot(occ_poly, add=T, lwd=2, col=rgb(0,0,1,alpha=0.3));
plot(occ_pt, add=T, pch=18, cex=2, col="blue");
## Change the definition of suitability to include 4 criteria and not 5
## since all observed cases occurred in Rural areas:
smaxsuit<-suit; smaxsuit[smaxsuit<4]<-0;
plot(smaxsuit, col = c("grey", "red"), legend=FALSE, axes=FALSE, box=FALSE)
## Zoom into location with known cases
plot(smaxsuit, col = c(rgb(0.5,0.5, 0.5,alpha=0.3),
rgb(1,0,0,alpha=0.5)), legend=FALSE, axes=FALSE,
box=FALSE, ext=raster::union(extent(occ_pt), extent(occ_poly)))
plot(occ_poly, add=T, lwd=2, col=rgb(0,0,1,alpha=0.3));
plot(occ_pt, add=T, pch=18, cex=2, col="blue");
mask<-cov_c$EVI
mex<-subset(world, NAME=="Mexico")
# Generate random "background points" using two approaches:
# One approach involves randomly sampling throughout the spatial extent.
# We purposefully exclude regions with known occurrence points
bg_1 <- SpatialPoints(randomPoints(mask, 500, p=occ_pt), proj4string = wgs84)
# Second approach involves sampling within a radius of known occurrence points
# We do this because we know Agent X is most likely to spread to points
# closest to known occurrence points. We set an arbitrary radius of 100 km.
buff <- polygons(circles(occ_pt, d=100000, lonlat=TRUE))
buff<-crop(buff, mex)
bg_2 <- spsample(buff, 250, type='random', iter=25)
par(mfrow=c(1,2), oma=c(1,0,1,0), mar=c(1,0,2,0))
plot(!is.na(mask), legend=FALSE, axes=FALSE, box=FALSE,
main="Random Background")
plot(bg_1, pch=18, cex=0.5, col="red", add=T)
plot(!is.na(mask), legend=FALSE, axes=FALSE, box=FALSE,
main="Restricted Background")
plot(bg_2, pch=18, cex=0.5, col="red", add=T)
## Merge presence/absence data into one df
occ_pt@data$pres<-1; occ_pt@data[,1:4]<-NULL;
bg_1<-SpatialPointsDataFrame(bg_1@coords,
data.frame(pres=rep(0, nrow(bg_1@coords))))
bg_2<-SpatialPointsDataFrame(bg_2@coords,
data.frame(pres=rep(0, nrow(bg_2@coords))))
## Extract raster data to all pts
pts<-do.call('rbind', list(occ_pt, bg_1, bg_2))
pts@data<-cbind(pts@data, raster::extract(covs, pts))
df<-pts@data; df<- df %>% subset(!is.na(df)); df$pres<-as.factor(df$pres);
fit<-glm(pres ~ ., data=df, family="binomial")
summary(fit)
e1<-evaluate(p=occ_pt, a=bg_1, model=fit, x=covs)
e2<-evaluate(p=occ_pt, a=bg_2, model=fit, x=covs)
par(mfrow=c(2, 3), oma=c(1,1,1,1), mar=c(2,2,2,2))
density(e1); boxplot(e1, col=c('blue', 'red')); plot(e1, 'ROC');
density(e2); boxplot(e2, col=c('green', 'red')); plot(e2, 'ROC');
pts<-do.call('rbind', list(occ_pt, bg_1))
pts@data<-cbind(pts@data, raster::extract(covs, pts))
#df<-cbind(pts@data, coordinates(pts))
#
# # 75% training data
# samp <- sample(nrow(df), round(0.75 * nrow(df)))
# traindata <- df[samp,]
#
# # Training data only includes presence, no absent points
# traindata <- traindata[traindata[,1] == 1, ]
# traindata<-SpatialPointsDataFrame(traindata[, 7:8], data=traindata)
#
# # 25% testing data
# testdata <- df[-samp,]
#
# # Testing data is split into presence and absence SpatialPointDataFrames
# prestest<-testdata[testdata$pres==1,];
# prestest<-SpatialPointsDataFrame(prestest[,7:8], data=prestest)
#
# abstest<-testdata[testdata$pres==0,]
# abstest<-SpatialPointsDataFrame(abstest[,7:8], data=abstest)
## K-fold partitioning
# Separate presence & absence data
occ_pt@data<-cbind(occ_pt@data, data.frame(raster::extract(covs,
occ_pt@coords)))
occ_pt@data$group <- kfold(occ_pt, 5)
pres_train <- subset(occ_pt, group != 1);
pres_test <- subset(occ_pt, group == 1);
# Generate background data
backg <- randomPoints(covs, n=1000, mask=covs[[1]])
backg<-SpatialPoints(backg)
backg<-SpatialPointsDataFrame(backg@coords,
data=data.frame(raster::extract(covs, backg@coords)))
backg$group <- kfold(backg, 5)
backg_train <- subset(backg, group != 1);
backg_test <- subset(backg, group == 1);
r = raster(covs, 1)
ext=extent(-110, -85, 14.5, 25)
plot(!is.na(r), col=c('white', 'light grey'), legend=FALSE)
plot(ext, add=TRUE, col='red', lwd=2)
points(backg_train, pch='-', cex=1, col='yellow')
points(backg_test, pch='-', cex=1, col='black')
points(pres_train, pch= '+', cex=1,col='green')
points(pres_test, pch='+', cex=1, col='blue')
sb <- ssb(pres_test, backg_test, pres_train, lonlat=T)
sb[,1]/sb[,2]
## Values are close enough to 0, evidence for spatial sorting bias
i <- pwdSample(pres_test, backg_test, pres_train, n=1, tr=0.1)
pres_test_pwd <- pres_test[!is.na(i[,1]), ]
backg_test_pwd <- backg_test[na.omit(as.vector(i)), ]
sb2 <- ssb(pres_test_pwd, backg_test_pwd, pres_train, lonlat=T)
sb2[1]/ sb2[2]
## SSB value ~1, so spatial sorting bias is no longer an issue
# logistic regression:
glm <- glm(pres ~ EVI+LST+Aridity+Population, family = binomial,
data=pres_train@data)
summary(glm)
glm_e<-evaluate(pres_test, backg_test, glm)
plot(glm_e, 'ROC')
par(mfrow=c(2,2))
plot(glm_e, 'ROC'); plot(erf1, 'ROC'); plot(e_pwd, 'ROC'); plot(e_mm, 'ROC')
x=c("raster", "rgeos", "sp", "reshape2", "dplyr", "RColorBrewer",
"gridExtra", "knitr", "here", "haven", "rgdal", "corrplot", "mgcv",
"ggplot2", "tidyr", "grid", "dismo", "rworldmap", "maptools",
"randomForest")
lapply(x, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE,
fig.width=12, fig.height=8)
options(scipen=999)
set.seed(500)
rm(list = ls())
wgs84<-CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0");
occ<-read.csv("occurrence.csv")
occ_pt<- occ %>% subset(occurrence_type=="point")
occ_pt<-SpatialPointsDataFrame(occ_pt[,1:2], data=occ_pt)
occ_poly<-occ %>% subset(occurrence_type=="polygon") %>% arrange(longitude)
occ_poly = SpatialPolygons(list(Polygons(list(Polygon(occ_poly[,1:2])), 1)))
projection(occ_poly)<-wgs84
world<-getMap(); sa<-subset(world, continent=="South America")
occ_poly<-crop(occ_poly, sa)
covs<-stack()
for(j in 1:5){
covs<-addLayer(covs, raster("covariate_brick.tif", band=j))
}
names(covs)<-c("EVI", "LST", "Aridity", "Rural-Urban", "Population")
par(oma=c(0,0,0,0), mar=c(0,0,0,0))
plot(covs);
plot(covs[[1]], legend=F, axes=FALSE, box=FALSE);
plot(occ_poly, add=T, lwd=2, col=rgb(0,0,1,alpha=0.3));
plot(occ_pt, add=T, pch=18, cex=0.75, col="red");
ras_dat<-data.frame(raster::extract(covs, occ_pt))
summary(ras_dat)
pairs(ras_dat, fig=TRUE)
M <- cor(ras_dat)
corrplot(M, method="circle")
mins<-apply(ras_dat,2,min); maxs<-apply(ras_dat,2,max);
# Create copy of covariates
cov_c<-covs
for(j in 1:5){
cov_c[[j]][(cov_c[[j]]<mins[j] | cov_c[[j]]>maxs[j])] <- 0
}
# Reclassify values to 0,1
m <- matrix(c(0.000000000000001, max(cellStats(cov_c, "max")), 1), ncol=1,
byrow=T)
covs_rc<-raster::reclassify(cov_c[[c(1,2,3,5)]], m)
covs_rc<-addLayer(covs_rc, covs[[4]])
## Extract layers that meet all criteria
suit<-sum(covs_rc)
rpal <- brewer.pal(n = 5, name = "Reds")
plot(suit, col = rpal)
maxsuit<-suit; maxsuit[maxsuit<5]<-0;
plot(maxsuit, col = c("grey", "red"), legend=FALSE, axes=FALSE, box=FALSE)
## Zoom into location with known cases
plot(maxsuit, col = c("grey", "red"), legend=FALSE, axes=FALSE, box=FALSE,
ext=raster::union(extent(occ_pt), extent(occ_poly)))
plot(occ_poly, add=T, lwd=2, col=rgb(0,0,1,alpha=0.3));
plot(occ_pt, add=T, pch=18, cex=2, col="blue");
## Change the definition of suitability to include 4 criteria and not 5
## since all observed cases occurred in Rural areas:
smaxsuit<-suit; smaxsuit[smaxsuit<4]<-0;
plot(smaxsuit, col = c("grey", "red"), legend=FALSE, axes=FALSE, box=FALSE)
## Zoom into location with known cases
plot(smaxsuit, col = c(rgb(0.5,0.5, 0.5,alpha=0.3),
rgb(1,0,0,alpha=0.5)), legend=FALSE, axes=FALSE,
box=FALSE, ext=raster::union(extent(occ_pt), extent(occ_poly)))
plot(occ_poly, add=T, lwd=2, col=rgb(0,0,1,alpha=0.3));
plot(occ_pt, add=T, pch=18, cex=2, col="blue");
mask<-cov_c$EVI
mex<-subset(world, NAME=="Mexico")
# Generate random "background points" using two approaches:
# One approach involves randomly sampling throughout the spatial extent.
# We purposefully exclude regions with known occurrence points
bg_1 <- SpatialPoints(randomPoints(mask, 500, p=occ_pt), proj4string = wgs84)
# Second approach involves sampling within a radius of known occurrence points
# We do this because we know Agent X is most likely to spread to points
# closest to known occurrence points. We set an arbitrary radius of 100 km.
buff <- polygons(circles(occ_pt, d=100000, lonlat=TRUE))
buff<-crop(buff, mex)
bg_2 <- spsample(buff, 250, type='random', iter=25)
par(mfrow=c(1,2), oma=c(1,0,1,0), mar=c(1,0,2,0))
plot(!is.na(mask), legend=FALSE, axes=FALSE, box=FALSE,
main="Random Background")
plot(bg_1, pch=18, cex=0.5, col="red", add=T)
plot(!is.na(mask), legend=FALSE, axes=FALSE, box=FALSE,
main="Restricted Background")
plot(bg_2, pch=18, cex=0.5, col="red", add=T)
## Merge presence/absence data into one df
occ_pt@data$pres<-1; occ_pt@data[,1:4]<-NULL;
bg_1<-SpatialPointsDataFrame(bg_1@coords,
data.frame(pres=rep(0, nrow(bg_1@coords))))
bg_2<-SpatialPointsDataFrame(bg_2@coords,
data.frame(pres=rep(0, nrow(bg_2@coords))))
## Extract raster data to all pts
pts<-do.call('rbind', list(occ_pt, bg_1, bg_2))
pts@data<-cbind(pts@data, raster::extract(covs, pts))
df<-pts@data; df<- df %>% subset(!is.na(df)); df$pres<-as.factor(df$pres);
fit<-glm(pres ~ ., data=df, family="binomial")
summary(fit)
e1<-evaluate(p=occ_pt, a=bg_1, model=fit, x=covs)
e2<-evaluate(p=occ_pt, a=bg_2, model=fit, x=covs)
par(mfrow=c(2, 3), oma=c(1,1,1,1), mar=c(2,2,2,2))
density(e1); boxplot(e1, col=c('blue', 'red')); plot(e1, 'ROC');
density(e2); boxplot(e2, col=c('green', 'red')); plot(e2, 'ROC');
pts<-do.call('rbind', list(occ_pt, bg_1))
pts@data<-cbind(pts@data, raster::extract(covs, pts))
#df<-cbind(pts@data, coordinates(pts))
#
# # 75% training data
# samp <- sample(nrow(df), round(0.75 * nrow(df)))
# traindata <- df[samp,]
#
# # Training data only includes presence, no absent points
# traindata <- traindata[traindata[,1] == 1, ]
# traindata<-SpatialPointsDataFrame(traindata[, 7:8], data=traindata)
#
# # 25% testing data
# testdata <- df[-samp,]
#
# # Testing data is split into presence and absence SpatialPointDataFrames
# prestest<-testdata[testdata$pres==1,];
# prestest<-SpatialPointsDataFrame(prestest[,7:8], data=prestest)
#
# abstest<-testdata[testdata$pres==0,]
# abstest<-SpatialPointsDataFrame(abstest[,7:8], data=abstest)
## K-fold partitioning
# Separate presence & absence data
occ_pt@data<-cbind(occ_pt@data, data.frame(raster::extract(covs,
occ_pt@coords)))
occ_pt@data$group <- kfold(occ_pt, 5)
pres_train <- subset(occ_pt, group != 1);
pres_test <- subset(occ_pt, group == 1);
# Generate background data
backg <- randomPoints(covs, n=1000, mask=covs[[1]])
backg<-SpatialPoints(backg)
backg<-SpatialPointsDataFrame(backg@coords,
data=data.frame(raster::extract(covs, backg@coords)))
backg$group <- kfold(backg, 5)
backg_train <- subset(backg, group != 1);
backg_test <- subset(backg, group == 1);
r = raster(covs, 1)
ext=extent(-110, -85, 14.5, 25)
plot(!is.na(r), col=c('white', 'light grey'), legend=FALSE)
plot(ext, add=TRUE, col='red', lwd=2)
points(backg_train, pch='-', cex=1, col='yellow')
points(backg_test, pch='-', cex=1, col='black')
points(pres_train, pch= '+', cex=1,col='green')
points(pres_test, pch='+', cex=1, col='blue')
sb <- ssb(pres_test, backg_test, pres_train, lonlat=T)
sb[,1]/sb[,2]
## Values are close enough to 0, evidence for spatial sorting bias
i <- pwdSample(pres_test, backg_test, pres_train, n=1, tr=0.1)
pres_test_pwd <- pres_test[!is.na(i[,1]), ]
backg_test_pwd <- backg_test[na.omit(as.vector(i)), ]
sb2 <- ssb(pres_test_pwd, backg_test_pwd, pres_train, lonlat=T)
sb2[1]/ sb2[2]
## SSB value ~1, so spatial sorting bias is no longer an issue
# logistic regression:
glm <- glm(pres ~ EVI+LST+Aridity+Population, family = binomial,
data=pres_train@data)
summary(glm)
glm_e<-evaluate(pres_test, backg_test, glm)
pg <- predict(covs, glm)
par(mfrow=c(1,2))
?get.data.frame
?getData
covs
extent(covs)
sst<-getData('worldclim', var='bio', res=2.5)
bio<-raster::getData('worldclim', var='bio', res=2.5)
occ<-read.csv("occurrence.csv")
?ggplot
head(occ)
ggplot(occ)+geom_histogram(x=year)
ggplot(data=occ)+geom_histogram(x=year)
ggplot(data=occ)+geom_histogram(x=data$year)
ggplot(occ)+geom_histogram(aes(x=year))
ggplot(occ)+geom_bar(aes(x=year))
prec<-raster::getData('worldclim', var='prec', res=2.5)
plot(prec)
test<-calc(prec, 'mean')
?calc
test<-mean(prec)
prec<-crop(prec, extent(covs))
plot(prec)
test<-calc(prec, 'mean')
test<-mean(prec)
plot(test)
prec<-mean(prec)
covs2<-addLayer(prec)
covs2<-addLayer(covs2, prec)
covs2
covs
covs2<-dropLayer(covs, 'Rural.Urban')
covs2<-addLayer(covs2, prec)
plot(covs2)
names(covs2)[5]<-"Prec";
plot(covs2)
occ_pt2<-occ_pt; occ_pt2@data<-data.frame(pres=occ_pt2$pres);
pts<-do.call('rbind', list(occ_pt2, bg_1))
pts@data<-cbind(pts@data, raster::extract(covs, pts))
df<-cbind(pts@data, coordinates(pts))
# 75% training data
samp <- sample(nrow(df), round(0.75 * nrow(df)))
traindata <- df[samp,]
pres_train<-traindata[traindata$pres==1,]
backg_train<-traindata[traindata$pres==0,]
# 25% testing data
testdata <- df[-samp,]
pres_test<-testdata[testdata$pres==1,]
backg_test<-testdata[testdata$pres==0,]
rf1 <- randomForest(pres ~ EVI+LST+Aridity+Population+Prec,
data=traindata)
traindata
head(traindata)
occ_pt2<-occ_pt; occ_pt2@data<-data.frame(pres=occ_pt2$pres);
pts<-do.call('rbind', list(occ_pt2, bg_1))
pts@data<-cbind(pts@data, raster::extract(covs2, pts))
df<-cbind(pts@data, coordinates(pts))
head(df)
# 75% training data
samp <- sample(nrow(df), round(0.75 * nrow(df)))
traindata <- df[samp,]
pres_train<-traindata[traindata$pres==1,]
backg_train<-traindata[traindata$pres==0,]
# 25% testing data
testdata <- df[-samp,]
pres_test<-testdata[testdata$pres==1,]
backg_test<-testdata[testdata$pres==0,]
rf1 <- randomForest(pres ~ EVI+LST+Aridity+Population+Prec,
data=traindata)
rf2 <- randomForest(factor(pres) ~ EVI+LST+Aridity+Population+Prec,
data=traindata)
erf1 <- evaluate(pres_test, backg_test, rf1)
erf2 <- evaluate(pres_test, backg_test, rf2)
rf1 <- randomForest(pres ~ EVI+LST+Aridity+Population+Prec,
data=traindata)
erf1 <- evaluate(pres_test, backg_test, rf1)
pr <- predict(covs, rf1)
par(mfrow=c(1,2))
plot(pr, main='Random Forest, regression')
tr <- threshold(erf1, 'spec_sens')
plot(pr > tr, main='presence/absence')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
pr <- predict(covs2, rf1)
par(mfrow=c(1,2))
plot(pr, main='Random Forest, regression')
tr <- threshold(erf1, 'spec_sens')
plot(pr > tr, main='presence/absence')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
plot(erf1, 'ROC');
pr <- predict(covs2, rf1)
par(mfrow=c(1,3))
plot(pr, main='Random Forest, regression')
tr <- threshold(erf1, 'spec_sens')
plot(pr > tr, main='presence/absence')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
plot(erf1, 'ROC');
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(pr, main='Random Forest, regression')
tr <- threshold(erf1, 'spec_sens')
plot(pr > tr, main='presence/absence')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
plot(erf1, 'ROC');
par(mfrow=c(1,3), mar=c(2,2,2,2))
plot(pr, main='Random Forest, regression')
tr <- threshold(erf1, 'spec_sens')
plot(pr > tr, main='presence/absence')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
plot(erf1, 'ROC');
occ_pt2<-occ_pt; occ_pt2@data<-data.frame(pres=occ_pt2$pres);
pts<-do.call('rbind', list(occ_pt2, bg_1))
pts@data<-cbind(pts@data, raster::extract(covs, pts))
df<-cbind(pts@data, coordinates(pts))
# 75% training data
samp <- sample(nrow(df), round(0.75 * nrow(df)))
traindata <- df[samp,]
pres_train<-traindata[traindata$pres==1,]
backg_train<-traindata[traindata$pres==0,]
# 25% testing data
testdata <- df[-samp,]
pres_test<-testdata[testdata$pres==1,]
backg_test<-testdata[testdata$pres==0,]
rf1 <- randomForest(pres ~ EVI+LST+Aridity+Population,
data=traindata)
rf2 <- randomForest(factor(pres) ~ EVI+LST+Aridity+Population,
data=traindata)
erf1 <- evaluate(pres_test, backg_test, rf1)
erf2 <- evaluate(pres_test, backg_test, rf2)
pr <- predict(covs, rf1)
par(mfrow=c(1,2))
plot(pr, main='Random Forest, regression')
tr <- threshold(erf1, 'spec_sens')
plot(pr > tr, main='presence/absence')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
occ_pt2<-occ_pt; occ_pt2@data<-data.frame(pres=occ_pt2$pres);
pts<-do.call('rbind', list(occ_pt2, bg_1))
pts@data<-cbind(pts@data, raster::extract(covs2, pts))
df<-cbind(pts@data, coordinates(pts))
# 75% training data
samp <- sample(nrow(df), round(0.75 * nrow(df)))
traindata <- df[samp,]
pres_train<-traindata[traindata$pres==1,]
backg_train<-traindata[traindata$pres==0,]
# 25% testing data
testdata <- df[-samp,]
pres_test<-testdata[testdata$pres==1,]
backg_test<-testdata[testdata$pres==0,]
rf2 <- randomForest(pres ~ EVI+LST+Aridity+Population+Prec,
data=traindata)
erf2 <- evaluate(pres_test, backg_test, rf1); plot(erf1, 'ROC');
pr <- predict(covs2, rf1)
par(mfrow=c(1,3), mar=c(2,2,2,2))
tr <- threshold(erf1, 'spec_sens')
plot(pr > tr, main='Presence/Absence')
points(pres_train, pch='+')
points(backg_train, pch='-', cex=0.25)
plot(erf1, 'ROC');
plot(erf2, 'ROC');
?ssb
library(dismo)
?ssb
covs
x=c("raster", "rgeos", "sp", "reshape2", "dplyr", "RColorBrewer",
"gridExtra", "knitr", "here", "haven", "rgdal", "corrplot", "mgcv",
"ggplot2", "tidyr", "grid", "dismo", "rworldmap", "maptools",
"randomForest", "tufte")
lapply(x, require, character.only = TRUE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
strip.white = TRUE, fig.width=16, fig.height=8, dpi=250)
options(scipen=999)
set.seed(500)
rm(list = ls())
wgs84<-CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0");
covs<-stack()
for(j in 1:5){
covs<-addLayer(covs, raster("covariate_brick.tif", band=j))
}
covs<-trim(covs)
covs<-stack()
for(j in 1:5){
covs<-addLayer(covs, raster("covariate_brick.tif", band=j))
}
covs<-trim(covs)
covs[[1]]
data.frame(c(6688000, 935, 50), c(4, 7500, 9333))
df=data.frame(eth=c(6688000, 935, 50), med_ch=c(4, 7500, 9333))
df
uga=data.frame(eth=c(NA, 68, 445), med_ch=c(NA, NA, 4693))
uga
?kable
row.names(eth)=c("Households", "Markets", "Commercial Farms")
eth=data.frame(eth=c(6688000, 935, 50), med_ch=c(4, 7500, 9333))
row.names(eth)=c("Households", "Markets", "Commercial Farms")
eth
kable(eth, row.names=TRUE, col.names=c("Total", "Median # of Chickens"))
library(knitr)
kable(eth, row.names=TRUE, col.names=c("Total", "Median # of Chickens"))
?replicate
library(slidify)
library(slidifyLibraries)
author("asl2050")
